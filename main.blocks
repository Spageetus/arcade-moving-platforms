<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable type="KIND_SpriteKind" id="?O!8@df5$W5vRR.{A;h3">Platform</variable></variables><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Platforms" line1="{" line2="    class Platformer" line3="    {" line4="        isOnPlatform = false" line5="        currentPlatform: Sprite = null" line6="        sprite: Sprite = null" line7="        gravity = 0" line8="        constructor(sprite: Sprite)" line9="        {" line10="            this.sprite = sprite" line11="            this.gravity = sprite.ay" line12="            if(this.gravity == 0)" line13="            {" line14="                console.log(&quot;WARNING: sprite with id:&quot; + sprite.id + &quot; has a y acceleration of 0&quot;)" line15="            }" line16="        }" line17="    }" line18="" line19="    let allPlatformers: Platformer[]" line20="    let spritesRidePlatforms: boolean" line21="    const platformKind = SpriteKind.Platform" line22="" line23="    /**" line24="     * returns SpriteKind.Platform" line25="     */" line26="    //% block=&quot;Platform&quot; color=#3B6FEA group='SpriteKind'" line27="    //% blockid=&quot;platformKind&quot;" line28="    export function getPlatformKind()" line29="    {" line30="        return platformKind" line31="    }" line32="" line33="    /**" line34="     * Creates a platform using an image" line35="     * @param image" line36="     */" line37="    //% block=&quot;platform $img&quot; group='Create' weight=100" line38="    //% img.shadow=&quot;screen_image_picker&quot;" line39="    //% blockid=&quot;createPlatform&quot;" line40="    //% blockSetVariable=myPlatform" line41="    export function create(img: Image) {" line42="        if (SpriteKind.Platform == undefined) { //Platform kind is undefined when this function runs for the first time" line43="            //SpriteKind.Platform = SpriteKind.Player-1" line44="        }" line45="        return sprites.create(img, SpriteKind.Platform)" line46="    }" line47="" line48="    /**" line49="     * Allows a sprite to use platforms" line50="     * @param Sprite" line51="     */" line52="    //% block=&quot;make %sprite=variables_get(mySprite) use platforms&quot;" line53="    //% blockid=&quot;makeSpritePlatformer&quot;" line54="    //% group='Create'" line55="    //% " line56="    export function makePlatformer(sprite: Sprite)" line57="    {" line58="        if(allPlatformers == null)" line59="        {" line60="            allPlatformers = []" line61="        }" line62="        let temp = allPlatformers" line63="        while(allPlatformers.length &lt;= sprite.id)" line64="        {" line65="            allPlatformers.push(null)" line66="        }" line67="        allPlatformers[sprite.id] = new Platformer(sprite)" line68="    }" line69="" line70="    /**" line71="     * Returns if Sprites are allowed to ride on top of platforms" line72="     * @returns boolean" line73="     */" line74="    //% block=&quot;do sprites ride platforms&quot;" line75="    //% blockid=&quot;getSpritesRidePlatforms&quot;" line76="    //% group='Behavior'" line77="    export function doSpritesRidePlatforms()" line78="    {" line79="        return spritesRidePlatforms" line80="    }" line81="" line82="    /**" line83="     * Changes sprite riding behavior" line84="     * @param boolean" line85="     */" line86="    //% block=&quot;set sprites ride platforms %b&quot;" line87="    //% blockid=&quot;setSpritesRidePlatforms&quot;" line88="    //% group='Behavior'" line89="    //% b.shadow=&quot;toggleOnOff&quot;" line90="    export function setSpritesRidePlatforms(b: boolean)" line91="    {" line92="        spritesRidePlatforms = b" line93="    }" line94="" line95="    /**" line96="     * Returns true if a sprite is on top of a platform" line97="     * @param Sprite" line98="     * @returns boolean" line99="     */" line100="    //% block=&quot;Is %sprite=variables_get(mySprite) on a platform&quot;" line101="    //% blockid=&quot;isSpriteOnPlatform&quot;" line102="    //% group='others'" line103="    export function isSpriteOnPlatform(sprite: Sprite) {" line104="        if (sprite.id &lt; allPlatformers.length) //sprite could be a platformer" line105="        {" line106="            if (allPlatformers[sprite.id] != null) //sprite is a platformer" line107="            {" line108="                return allPlatformers[sprite.id].isOnPlatform" line109="            }" line110="        }" line111="        return false" line112="    }" line113="" line114="" line115="    /**" line116="     * Handles Platform Collision (use inside of an overlap container)" line117="     * @param sprite, platform" line118="     */" line119="    //% block=&quot;make %sprite=variables_get(mySprite) collide with %platform=variables_get(myPlatform)&quot; group='others'" line120="    //% blockid=&quot;platformCollisionHandler&quot;" line121="    //% group='Collision'" line122="    export function platformCollisionHandler(sprite: Sprite, platform: Sprite) //call function inside of overlap container" line123="    {" line124="        if(platform.kind() != SpriteKind.Platform)" line125="        {" line126="            console.log(&quot;Cannot ride non-Platform sprites&quot;)" line127="            return" line128="        }" line129="        if (allPlatformers == null || sprite.id &gt;= allPlatformers.length)" line130="        {" line131="            console.log(&quot;No platformers&quot;)" line132="            return" line133="        }" line134="        let currentPlatformer = allPlatformers[sprite.id]" line135="        if(currentPlatformer == null)" line136="        {" line137="            console.log(&quot;Sprite with id: &quot; + sprite.id + &quot; is not a Platformer&quot;)" line138="            return" line139="        }" line140="        if (sprite.bottom &lt;= platform.y - (platform.y - platform.top)/4) //hits top of platform" line141="        {" line142="            currentPlatformer.isOnPlatform = true" line143="            currentPlatformer.currentPlatform = platform" line144="            sprite.ay = 0" line145="            sprite.vy = 0" line146="            sprite.bottom = platform.top" line147="        }" line148="        else if (sprite.top &gt;= platform.y) //hit bottom of tile" line149="        {" line150="            sprite.top = platform.bottom" line151="            sprite.vy = 0" line152="        }" line153="        if (sprite.right &lt; platform.x) { //hits left side of platform" line154="            //sprite.right = platform.left" line155="            while (sprite.right &lt; (platform.left + platform.x)/2 &amp;&amp; sprite.overlapsWith(platform)) {" line156="                sprite.right -= 2" line157="            }" line158="        }" line159="        else if (sprite.left &gt; platform.x) { //hits right side of platform" line160="            //sprite.left = platform.right" line161="            while(sprite.left &gt; (platform.right + platform.x)/2 &amp;&amp; sprite.overlapsWith(platform))" line162="            {" line163="                sprite.left += 1" line164="            }" line165="        }" line166="    }" line167="" line168="    game.onUpdate(function()" line169="    {" line170="        if(allPlatformers == null) //stops dereferencing null error" line171="        {" line172="            return" line173="        }" line174="        for(let p of allPlatformers)" line175="        {" line176="            if(p != null) //makes sure platformer exists" line177="            {" line178="                if(p.currentPlatform != null) //makes sure platformer is on a platform" line179="                {" line180="                    let sprite = p.sprite" line181="" line182="                    if (sprite.left &gt; p.currentPlatform.right || sprite.right &lt; p.currentPlatform.left) //drops platformer off of platform if it walks off the edge" line183="                    {" line184="                        p.isOnPlatform = false" line185="                        p.currentPlatform = null" line186="                        sprite.ay = p.gravity" line187="                        continue" line188="                    }" line189="" line190="                    if (sprite.bottom &lt; p.currentPlatform.top-2) { //sprite jumps off of platform (added wiggle room to prevent jittering)" line191="                        p.isOnPlatform = false" line192="                        p.currentPlatform = null" line193="                        sprite.ay = p.gravity" line194="                        continue" line195="                    }" line196="" line197="                    if (spritesRidePlatforms) { //makes sprites have same velocity as platform" line198="                        sprite.vx = p.currentPlatform.vx" line199="                        sprite.vy = p.currentPlatform.vy" line200="                    }" line201="                    else //stops sprite from staying on platform" line202="                    {" line203="                        sprite.vx = 0" line204="                    }" line205="                }" line206="            }" line207="        }" line208="    })" line209="}" numlines="210"></mutation></block></statement></block></xml>
<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable type="KIND_SpriteKind" id="QUXQr(V{}ev^;Ypfwinh">Platform</variable></variables><block type="pxt-on-start" id="DWQ_W,S:atYz#J=C}5QG" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="?/ZSP|-,1iaBBv[?-J:-" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Platforms" line1="{" line2="    class Platformer" line3="    {" line4="        isOnPlatform = false" line5="        currentPlatform: Sprite = null" line6="        sprite: Sprite = null" line7="        gravity = 0" line8="        constructor(sprite: Sprite)" line9="        {" line10="            this.sprite = sprite" line11="            this.gravity = sprite.ay" line12="            if(this.gravity == 0)" line13="            {" line14="                console.log(&quot;WARNING: sprite with id:&quot; + sprite.id + &quot; has a y acceleration of 0&quot;)" line15="            }" line16="        }" line17="    }" line18="" line19="    let allPlatformers: Platformer[]" line20="    let spritesRidePlatforms: boolean" line21="    " line22="    //% block=&quot;Platform&quot; color=#3B6FEA group='SpriteKind'" line23="    //% blockid=&quot;platformKind&quot;" line24="    export const platformKind = SpriteKind.Platform" line25="    console.log(platformKind)" line26="" line27="    /**" line28="     * Creates a platform using an image" line29="     * @param image" line30="     */" line31="    //% block=&quot;platform $img&quot; group='Create' weight=100" line32="    //% img.shadow=&quot;screen_image_picker&quot;" line33="    //% blockid=&quot;createPlatform&quot;" line34="    //% blockSetVariable=myPlatform" line35="    export function create(img: Image) {" line36="        if (SpriteKind.Platform == undefined) { //Platform kind is undefined when this function runs for the first time" line37="            //SpriteKind.Platform = SpriteKind.Player-1" line38="        }" line39="        return sprites.create(img, SpriteKind.Platform)" line40="    }" line41="" line42="    /**" line43="     * Allows a sprite to use platforms" line44="     * @param Sprite" line45="     */" line46="    //% block=&quot;make %sprite=variables_get(mySprite) use platforms&quot;" line47="    //% blockid=&quot;makeSpritePlatformer&quot;" line48="    //% group='Create'" line49="    //% " line50="    export function makePlatformer(sprite: Sprite)" line51="    {" line52="        if(allPlatformers == null)" line53="        {" line54="            allPlatformers = []" line55="        }" line56="        let temp = allPlatformers" line57="        while(allPlatformers.length &lt;= sprite.id)" line58="        {" line59="            allPlatformers.push(null)" line60="        }" line61="        allPlatformers[sprite.id] = new Platformer(sprite)" line62="    }" line63="" line64="    /**" line65="     * Returns if Sprites are allowed to ride on top of platforms" line66="     * @returns boolean" line67="     */" line68="    //% block=&quot;do sprites ride platforms&quot;" line69="    //% blockid=&quot;getSpritesRidePlatforms&quot;" line70="    //% group='Behavior'" line71="    export function doSpritesRidePlatforms()" line72="    {" line73="        return spritesRidePlatforms" line74="    }" line75="" line76="    /**" line77="     * Changes sprite riding behavior" line78="     * @param boolean" line79="     */" line80="    //% block=&quot;set sprites ride platforms %b&quot;" line81="    //% blockid=&quot;setSpritesRidePlatforms&quot;" line82="    //% group='Behavior'" line83="    //% b.shadow=&quot;toggleOnOff&quot;" line84="    export function setSpritesRidePlatforms(b: boolean)" line85="    {" line86="        spritesRidePlatforms = b" line87="    }" line88="" line89="    /**" line90="     * Returns true if a sprite is on top of a platform" line91="     * @param Sprite" line92="     * @returns boolean" line93="     */" line94="    //% block=&quot;Is %sprite=variables_get(mySprite) on a platform&quot;" line95="    //% blockid=&quot;isSpriteOnPlatform&quot;" line96="    //% group='others'" line97="    export function isSpriteOnPlatform(sprite: Sprite) {" line98="        if (sprite.id &lt; allPlatformers.length) //sprite could be a platformer" line99="        {" line100="            if (allPlatformers[sprite.id] != null) //sprite is a platformer" line101="            {" line102="                return allPlatformers[sprite.id].isOnPlatform" line103="            }" line104="        }" line105="        return false" line106="    }" line107="" line108="" line109="    /**" line110="     * Handles Platform Collision (use inside of an overlap container)" line111="     * @param sprite, platform" line112="     */" line113="    //% block=&quot;make %sprite=variables_get(mySprite) collide with %platform=variables_get(myPlatform)&quot; group='others'" line114="    //% blockid=&quot;platformCollisionHandler&quot;" line115="    //% group='Collision'" line116="    export function platformCollisionHandler(sprite: Sprite, platform: Sprite) //call function inside of overlap container" line117="    {" line118="        if(platform.kind() != SpriteKind.Platform)" line119="        {" line120="            console.log(&quot;Cannot ride non-Platform sprites&quot;)" line121="            return" line122="        }" line123="        if (allPlatformers == null || sprite.id &gt;= allPlatformers.length)" line124="        {" line125="            console.log(&quot;No platformers&quot;)" line126="            return" line127="        }" line128="        let currentPlatformer = allPlatformers[sprite.id]" line129="        if(currentPlatformer == null)" line130="        {" line131="            console.log(&quot;Sprite with id: &quot; + sprite.id + &quot; is not a Platformer&quot;)" line132="            return" line133="        }" line134="        if (sprite.bottom &lt;= platform.y - (platform.y - platform.top)/4) //hits top of platform" line135="        {" line136="            currentPlatformer.isOnPlatform = true" line137="            currentPlatformer.currentPlatform = platform" line138="            sprite.ay = 0" line139="            sprite.vy = 0" line140="            sprite.bottom = platform.top" line141="        }" line142="        else if (sprite.top &gt;= platform.y) //hit bottom of tile" line143="        {" line144="            sprite.top = platform.bottom" line145="            sprite.vy = 0" line146="        }" line147="        if (sprite.right &lt; platform.x) { //hits left side of platform" line148="            //sprite.right = platform.left" line149="            while (sprite.right &lt; (platform.left + platform.x)/2 &amp;&amp; sprite.overlapsWith(platform)) {" line150="                sprite.right -= 2" line151="            }" line152="        }" line153="        else if (sprite.left &gt; platform.x) { //hits right side of platform" line154="            //sprite.left = platform.right" line155="            while(sprite.left &gt; (platform.right + platform.x)/2 &amp;&amp; sprite.overlapsWith(platform))" line156="            {" line157="                sprite.left += 1" line158="            }" line159="        }" line160="    }" line161="" line162="    game.onUpdate(function()" line163="    {" line164="        if(allPlatformers == null) //stops dereferencing null error" line165="        {" line166="            return" line167="        }" line168="        for(let p of allPlatformers)" line169="        {" line170="            if(p != null) //makes sure platformer exists" line171="            {" line172="                if(p.currentPlatform != null) //makes sure platformer is on a platform" line173="                {" line174="                    let sprite = p.sprite" line175="" line176="                    if (sprite.left &gt; p.currentPlatform.right || sprite.right &lt; p.currentPlatform.left) //drops platformer off of platform if it walks off the edge" line177="                    {" line178="                        p.isOnPlatform = false" line179="                        p.currentPlatform = null" line180="                        sprite.ay = p.gravity" line181="                        continue" line182="                    }" line183="" line184="                    if (sprite.bottom &lt; p.currentPlatform.top-2) { //sprite jumps off of platform (added wiggle room to prevent jittering)" line185="                        p.isOnPlatform = false" line186="                        p.currentPlatform = null" line187="                        sprite.ay = p.gravity" line188="                        continue" line189="                    }" line190="" line191="                    if (spritesRidePlatforms) { //makes sprites have same velocity as platform" line192="                        sprite.vx = p.currentPlatform.vx" line193="                        sprite.vy = p.currentPlatform.vy" line194="                    }" line195="                    else //stops sprite from staying on platform" line196="                    {" line197="                        sprite.vx = 0" line198="                    }" line199="                }" line200="            }" line201="        }" line202="    })" line203="}" numlines="204"></mutation></block></statement></block></xml>
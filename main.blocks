<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable type="KIND_SpriteKind" id=";dwr@P7j:cw$[rzD`#9=">Player</variable><variable type="KIND_SpriteKind" id="^7-oIe7W;+j1uYON@7oz">Projectile</variable><variable type="KIND_SpriteKind" id="^oylL$PX+8W=vO@kWweG">Food</variable><variable type="KIND_SpriteKind" id="y~tMKkb^+o[Kv.5r96$#">Enemy</variable></variables><block type="pxt-on-start" id="SvX(Gfo+b[}uVWh2ADnT" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="Tl@w28Q?jXvdfUF}b8lM" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace SpriteKind {" line1="    export let Platform = SpriteKind.Player-1" line2="}" numlines="3"></mutation><next><block type="typescript_statement" id="]zTR-{TtJn4*m;3m73FL" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Platforms" line1="{" line2="    class Platformer" line3="    {" line4="        isOnPlatform = false" line5="        currentPlatform: Sprite = null" line6="        sprite: Sprite = null" line7="        gravity = 0" line8="        constructor(sprite: Sprite)" line9="        {" line10="            this.sprite = sprite" line11="            this.gravity = sprite.ay" line12="        }" line13="    }" line14="" line15="    let allPlatformers: Platformer[]" line16="    export let spritesRidePlatforms = false" line17="" line18="    export function create(img: Image) {" line19="        if (SpriteKind.Platform == undefined) { //Platform kind is undefined when this function runs for the first time" line20="            SpriteKind.Platform = SpriteKind.Player-1" line21="        }" line22="        return sprites.create(img, SpriteKind.Platform)" line23="    }" line24="" line25="    export function makePlatformer(sprite: Sprite)" line26="    {" line27="        if(allPlatformers == null)" line28="        {" line29="            allPlatformers = []" line30="        }" line31="        console.log(&quot;Sprite ID: &quot; + sprite.id)" line32="        let temp = allPlatformers" line33="        while(allPlatformers.length &lt;= sprite.id)" line34="        {" line35="            allPlatformers.push(null)" line36="        }" line37="        allPlatformers[sprite.id] = new Platformer(sprite)" line38="    }" line39="" line40="    export function isSpriteOnPlatform(sprite: Sprite)" line41="    {" line42="        if(sprite.id &lt; allPlatformers.length) //sprite could be a platformer" line43="        {" line44="            if(allPlatformers[sprite.id] != null) //sprite is a platformer" line45="            {" line46="                return allPlatformers[sprite.id].isOnPlatform" line47="            }" line48="        }" line49="        return false" line50="    }" line51="" line52="    export function platformCollisionHandler(sprite: Sprite, platform: Sprite)" line53="    {" line54="        let currentPlatformer = allPlatformers[sprite.id]" line55="        if(currentPlatformer == null)" line56="        {" line57="            console.log(&quot;Sprite with id: &quot; + sprite.id + &quot; is not a Platformer&quot;)" line58="            return" line59="        }" line60="        if (sprite.right &lt; platform.x) {" line61="            sprite.right = platform.left" line62="        }" line63="        else if (sprite.left &gt; platform.x) {" line64="            sprite.left = platform.right" line65="        }" line66="        else if (sprite.bottom &lt;= platform.y) //hits top of platform" line67="        {" line68="            currentPlatformer.isOnPlatform = true" line69="            currentPlatformer.currentPlatform = platform" line70="            sprite.ay = 0" line71="            sprite.vy = 0" line72="            sprite.bottom = platform.top" line73="        }" line74="        else if (sprite.top &gt;= platform.y) //hit bottom of tile" line75="        {" line76="            sprite.top = platform.bottom" line77="            sprite.vy = 0" line78="        }" line79="    }" line80="" line81="    game.onUpdate(function()" line82="    {" line83="        for(let p of allPlatformers)" line84="        {" line85="            if(p != null) //makes sure platformer exists" line86="            {" line87="                if(p.currentPlatform != null) //makes sure platformer is on a platform" line88="                {" line89="                    let sprite = p.sprite" line90="                    if(sprite.left &gt; p.currentPlatform.right || sprite.right &lt; p.currentPlatform.left) //drops platformer off of platform if it walks off the edge" line91="                    {" line92="                        p.isOnPlatform = false" line93="                        p.currentPlatform = null" line94="                        sprite.ay = p.gravity" line95="                    }" line96="                    else if(spritesRidePlatforms)" line97="                    {" line98="                        sprite.vx = p.currentPlatform.vx" line99="                        sprite.vy = p.currentPlatform.vy" line100="                    }" line101="                }" line102="            }" line103="        }" line104="    })" line105="}" numlines="106"></mutation></block></next></block></statement></block><block type="spritesoverlap" id="J{j/U*o+ypH1%:T68f7e" x="1124" y="0"><value name="HANDLER_DRAG_PARAM_sprite"><shadow type="argument_reporter_custom" id="nzOD~A/@~_V-P@*4b(DO"><mutation typename="Sprite"></mutation><field name="VALUE">sprite</field></shadow></value><value name="kind"><shadow type="spritekind" id="fOMWA^v#o==mKlKVM:.x"><field name="MEMBER">Player</field></shadow></value><value name="HANDLER_DRAG_PARAM_otherSprite"><shadow type="argument_reporter_custom" id=")5P!Nvdn6DecH9Dy?_^c"><mutation typename="Sprite"></mutation><field name="VALUE">platform</field></shadow></value><value name="otherKind"><shadow type="spritekind"></shadow><block type="typescript_expression" id="M0{(MB0Ep@aX=;M=#*(2" editable="false"><field name="EXPRESSION">SpriteKind.Platform</field></block></value><statement name="HANDLER"><block type="typescript_statement" id="ASK3=Dq#^F-t{ij1iF#k" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="Platforms.platformCollisionHandler(sprite, platform)" numlines="1"></mutation></block></statement></block></xml>
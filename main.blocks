<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="DNDplE41=lJH_l/@5Xc2" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="{phAAj+lI_n^9LS:K[K{" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace SpriteKind {" line1="    //% block=&quot;Platform&quot;" line2="    export let Platform = SpriteKind.Player-1" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="giyevndcG5,A,IWQ0JDg" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Platforms" line1="{" line2="    class Platformer" line3="    {" line4="        isOnPlatform = false" line5="        currentPlatform: Sprite = null" line6="        sprite: Sprite = null" line7="        gravity = 0" line8="        constructor(sprite: Sprite)" line9="        {" line10="            this.sprite = sprite" line11="            this.gravity = sprite.ay" line12="        }" line13="    }" line14="" line15="    let allPlatformers: Platformer[]" line16="    export let spritesRidePlatforms: boolean" line17="" line18="    /**" line19="     * Creates a platform using an image" line20="     * @param image" line21="     */" line22="    //% block=&quot;platform $img&quot;" line23="    //% img.shadow=&quot;screen_image_picker&quot;" line24="    export function create(img: Image) {" line25="        if (SpriteKind.Platform == undefined) { //Platform kind is undefined when this function runs for the first time" line26="            SpriteKind.Platform = SpriteKind.Player-1" line27="        }" line28="        return sprites.create(img, SpriteKind.Platform)" line29="    }" line30="" line31="    /**" line32="     * Allows a sprite to use platforms" line33="     * @param Sprite" line34="     */" line35="    //$ block=&quot;make $sprite platformer&quot;" line36="    export function makePlatformer(sprite: Sprite)" line37="    {" line38="        if(allPlatformers == null)" line39="        {" line40="            allPlatformers = []" line41="        }" line42="        let temp = allPlatformers" line43="        while(allPlatformers.length &lt;= sprite.id)" line44="        {" line45="            allPlatformers.push(null)" line46="        }" line47="        allPlatformers[sprite.id] = new Platformer(sprite)" line48="    }" line49="" line50="" line51="    export function isSpriteOnPlatform(sprite: Sprite)" line52="    {" line53="        if(sprite.id &lt; allPlatformers.length) //sprite could be a platformer" line54="        {" line55="            if(allPlatformers[sprite.id] != null) //sprite is a platformer" line56="            {" line57="                return allPlatformers[sprite.id].isOnPlatform" line58="            }" line59="        }" line60="        return false" line61="    }" line62="    /**" line63="     * Handles Platform Collision (use inside of an overlap container)" line64="     * @param sprite, platform" line65="     */" line66="    //% block=&quot;make $sprite collide with $platform&quot;" line67="    export function platformCollisionHandler(sprite: Sprite, platform: Sprite) //call function inside of overlap container" line68="    {" line69="        if(platform.kind() != SpriteKind.Platform)" line70="        {" line71="            console.log(&quot;Cannot ride non-Platform sprites&quot;)" line72="            return" line73="        }" line74="        if (allPlatformers == null || sprite.id &gt;= allPlatformers.length)" line75="        {" line76="            console.log(&quot;No platformers&quot;)" line77="            return" line78="        }" line79="        let currentPlatformer = allPlatformers[sprite.id]" line80="        if(currentPlatformer == null)" line81="        {" line82="            console.log(&quot;Sprite with id: &quot; + sprite.id + &quot; is not a Platformer&quot;)" line83="            return" line84="        }" line85="        if (sprite.bottom &lt;= platform.y - (platform.y - platform.top)/4) //hits top of platform" line86="        {" line87="            currentPlatformer.isOnPlatform = true" line88="            currentPlatformer.currentPlatform = platform" line89="            sprite.ay = 0" line90="            sprite.vy = 0" line91="            sprite.bottom = platform.top" line92="        }" line93="        else if (sprite.top &gt;= platform.y) //hit bottom of tile" line94="        {" line95="            sprite.top = platform.bottom" line96="            sprite.vy = 0" line97="        }" line98="        if (sprite.right &lt; platform.x) { //hits left side of platform" line99="            //sprite.right = platform.left" line100="            while (sprite.right &lt; (platform.left + platform.x)/2 &amp;&amp; sprite.overlapsWith(platform)) {" line101="                sprite.right -= 2" line102="            }" line103="        }" line104="        else if (sprite.left &gt; platform.x) { //hits right side of platform" line105="            //sprite.left = platform.right" line106="            while(sprite.left &gt; (platform.right + platform.x)/2 &amp;&amp; sprite.overlapsWith(platform))" line107="            {" line108="                sprite.left += 1" line109="            }" line110="        }" line111="    }" line112="" line113="    game.onUpdate(function()" line114="    {" line115="        if(allPlatformers == null) //stops dereferencing null error" line116="        {" line117="            return" line118="        }" line119="        for(let p of allPlatformers)" line120="        {" line121="            if(p != null) //makes sure platformer exists" line122="            {" line123="                if(p.currentPlatform != null) //makes sure platformer is on a platform" line124="                {" line125="                    let sprite = p.sprite" line126="" line127="                    if (sprite.left &gt; p.currentPlatform.right || sprite.right &lt; p.currentPlatform.left) //drops platformer off of platform if it walks off the edge" line128="                    {" line129="                        p.isOnPlatform = false" line130="                        p.currentPlatform = null" line131="                        sprite.ay = p.gravity" line132="                        continue" line133="                    }" line134="" line135="                    if (sprite.bottom &lt; p.currentPlatform.top-2) { //sprite jumps off of platform (added wiggle room to prevent jittering)" line136="                        p.isOnPlatform = false" line137="                        p.currentPlatform = null" line138="                        sprite.ay = p.gravity" line139="                        continue" line140="                    }" line141="" line142="                    if (spritesRidePlatforms) { //makes sprites have same velocity as platform" line143="                        sprite.vx = p.currentPlatform.vx" line144="                        sprite.vy = p.currentPlatform.vy" line145="                    }" line146="                    else //stops sprite from staying on platform" line147="                    {" line148="                        sprite.vx = 0" line149="                    }" line150="                }" line151="            }" line152="        }" line153="    })" line154="}" numlines="155"></mutation></block></next></block></statement></block></xml>
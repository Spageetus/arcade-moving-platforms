<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace SpriteKind {" line1="    export let Platform = SpriteKind.Player-1" line2="}" numlines="3"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Platforms" line1="{" line2="    class Platformer" line3="    {" line4="        isOnPlatform = false" line5="        currentPlatform: Sprite = null" line6="        sprite: Sprite = null" line7="        gravity = 0" line8="        constructor(sprite: Sprite)" line9="        {" line10="            this.sprite = sprite" line11="            this.gravity = sprite.ay" line12="        }" line13="    }" line14="" line15="    let allPlatformers: Platformer[]" line16="    export let spritesRidePlatforms: boolean" line17="" line18="    export function create(img: Image) {" line19="        if (SpriteKind.Platform == undefined) { //Platform kind is undefined when this function runs for the first time" line20="            SpriteKind.Platform = SpriteKind.Player-1" line21="        }" line22="        return sprites.create(img, SpriteKind.Platform)" line23="    }" line24="" line25="    export function makePlatformer(sprite: Sprite)" line26="    {" line27="        if(allPlatformers == null)" line28="        {" line29="            allPlatformers = []" line30="        }" line31="        let temp = allPlatformers" line32="        while(allPlatformers.length &lt;= sprite.id)" line33="        {" line34="            allPlatformers.push(null)" line35="        }" line36="        allPlatformers[sprite.id] = new Platformer(sprite)" line37="    }" line38="" line39="    export function isSpriteOnPlatform(sprite: Sprite)" line40="    {" line41="        if(sprite.id &lt; allPlatformers.length) //sprite could be a platformer" line42="        {" line43="            if(allPlatformers[sprite.id] != null) //sprite is a platformer" line44="            {" line45="                return allPlatformers[sprite.id].isOnPlatform" line46="            }" line47="        }" line48="        return false" line49="    }" line50="" line51="    export function platformCollisionHandler(sprite: Sprite, platform: Sprite) //call function inside of overlap container" line52="    {" line53="        if(platform.kind() != SpriteKind.Platform)" line54="        {" line55="            console.log(&quot;Cannot ride non-Platform sprites&quot;)" line56="            return" line57="        }" line58="        if (allPlatformers == null || sprite.id &gt;= allPlatformers.length)" line59="        {" line60="            console.log(&quot;No platformers&quot;)" line61="            return" line62="        }" line63="        let currentPlatformer = allPlatformers[sprite.id]" line64="        if(currentPlatformer == null)" line65="        {" line66="            console.log(&quot;Sprite with id: &quot; + sprite.id + &quot; is not a Platformer&quot;)" line67="            return" line68="        }" line69="        if (sprite.right &lt; platform.x) { //hits left side of platform" line70="            sprite.right = platform.left" line71="        }" line72="        else if (sprite.left &gt; platform.x) { //hits right side of platform" line73="            sprite.left = platform.right" line74="        }" line75="        else if (sprite.bottom &lt;= platform.y) //hits top of platform" line76="        {" line77="            currentPlatformer.isOnPlatform = true" line78="            currentPlatformer.currentPlatform = platform" line79="            sprite.ay = 0" line80="            sprite.vy = 0" line81="            sprite.bottom = platform.top" line82="        }" line83="        else if (sprite.top &gt;= platform.y) //hit bottom of tile" line84="        {" line85="            sprite.top = platform.bottom" line86="            sprite.vy = 0" line87="        }" line88="    }" line89="" line90="    game.onUpdate(function()" line91="    {" line92="        if(allPlatformers == null) //stops dereferencing null error" line93="        {" line94="            return" line95="        }" line96="        for(let p of allPlatformers)" line97="        {" line98="            if(p != null) //makes sure platformer exists" line99="            {" line100="                if(p.currentPlatform != null) //makes sure platformer is on a platform" line101="                {" line102="                    let sprite = p.sprite" line103="" line104="                    if (sprite.left &gt; p.currentPlatform.right || sprite.right &lt; p.currentPlatform.left) //drops platformer off of platform if it walks off the edge" line105="                    {" line106="                        p.isOnPlatform = false" line107="                        p.currentPlatform = null" line108="                        sprite.ay = p.gravity" line109="                        continue" line110="                    }" line111="" line112="                    if (sprite.bottom &lt; p.currentPlatform.top-2) { //sprite jumps off of platform (added wiggle room to prevent jittering)" line113="                        p.isOnPlatform = false" line114="                        p.currentPlatform = null" line115="                        sprite.ay = p.gravity" line116="                        continue" line117="                    }" line118="" line119="                    if (spritesRidePlatforms) { //makes sprites have same velocity as platform" line120="                        sprite.vx = p.currentPlatform.vx" line121="                        sprite.vy = p.currentPlatform.vy" line122="                    }" line123="                    else //stops sprite from staying on platform" line124="                    {" line125="                        sprite.vx = 0" line126="                    }" line127="                }" line128="            }" line129="        }" line130="    })" line131="}" numlines="132"></mutation></block></next></block></statement></block></xml>
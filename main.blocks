<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable type="KIND_SpriteKind" id="YAN-X=KP~c}u+!kuZ)tA">Player</variable><variable type="KIND_SpriteKind" id="]J90Leo;h1[EGCgl%5eE">Projectile</variable><variable type="KIND_SpriteKind" id="qbX2R0p/h[2dH`+!,EQw">Food</variable><variable type="KIND_SpriteKind" id="qX4mT/~;?oz[%|FdWu-9">Enemy</variable></variables><block type="pxt-on-start" id="n5dY8/F:Q;+N;O}oK*fb" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="I5*FAbLF7zTDK{%DwFmU" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace SpriteKind {" line1="    export let Platform = SpriteKind.Player-1" line2="}" numlines="3"></mutation><next><block type="typescript_statement" id="Pl|JhRS@IW3$C6FY[Z?;" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Platforms" line1="{" line2="    class Platformer" line3="    {" line4="        isOnPlatform = false" line5="        currentPlatform: Sprite = null" line6="        sprite: Sprite = null" line7="        constructor(sprite: Sprite)" line8="        {" line9="            this.sprite = sprite" line10="        }" line11="    }" line12="" line13="    let allPlatformers: Platformer[] = []" line14="" line15="    export function create(img: Image) {" line16="        if (SpriteKind.Platform == undefined) { //Platform kind is undefined when this function runs for the first time" line17="            SpriteKind.Platform = SpriteKind.Player-1" line18="        }" line19="        return sprites.create(img, SpriteKind.Platform)" line20="    }" line21="" line22="    export function makePlatformer(sprite: Sprite)" line23="    {" line24="        if(allPlatformers == null)" line25="        {" line26="            allPlatformers = []" line27="        }" line28="        console.log(&quot;Sprite ID: &quot; + sprite.id)" line29="        let temp = allPlatformers" line30="        while(allPlatformers.length &lt;= sprite.id)" line31="        {" line32="            allPlatformers.push(null)" line33="        }" line34="        allPlatformers[sprite.id] = new Platformer(sprite)" line35="    }" line36="" line37="" line38="" line39="" line40="    export function platformCollisionHandler(sprite: Sprite, platform: Sprite)" line41="    {" line42="        let currentPlatformer = allPlatformers[sprite.id]" line43="        if(currentPlatformer == null)" line44="        {" line45="            console.log(&quot;Sprite with id: &quot; + sprite.id + &quot; is not a Platformer&quot;)" line46="            return" line47="        }" line48="        if (sprite.right &lt; platform.x) {" line49="            sprite.right = platform.left" line50="        }" line51="        else if (sprite.left &gt; platform.x) {" line52="            sprite.left = platform.right" line53="        }" line54="        else if (sprite.bottom &lt;= platform.y) //hits top of platform" line55="        {" line56="            currentPlatformer.isOnPlatform = true" line57="            currentPlatformer.currentPlatform = platform" line58="            sprite.ay = 0" line59="            sprite.vy = 0" line60="            sprite.bottom = platform.top" line61="        }" line62="        else if (sprite.top &gt;= platform.y) //hit bottom of tile" line63="        {" line64="            sprite.top = platform.bottom" line65="            sprite.vy = 0" line66="        }" line67="    }" line68="}" numlines="69"></mutation></block></next></block></statement></block><block type="spritesoverlap" id="ADj86F-PGoE^h^e^UCtR" x="1144" y="20"><value name="HANDLER_DRAG_PARAM_sprite"><shadow type="argument_reporter_custom" id="Y-y_eu`gOn!`^gjV?uwA"><mutation typename="Sprite"></mutation><field name="VALUE">sprite</field></shadow></value><value name="kind"><shadow type="spritekind" id="Z;1}}NjU54A7S/X2@kK1"><field name="MEMBER">Player</field></shadow></value><value name="HANDLER_DRAG_PARAM_otherSprite"><shadow type="argument_reporter_custom" id="n={}%17^{ys4IVY;3R/K"><mutation typename="Sprite"></mutation><field name="VALUE">platform</field></shadow></value><value name="otherKind"><shadow type="spritekind"></shadow><block type="typescript_expression" id="KGs-NuuKCs![!NrE7jES" editable="false"><field name="EXPRESSION">SpriteKind.Platform</field></block></value><statement name="HANDLER"><block type="typescript_statement" id="yFS_QuOsfY{,c_VGb*3P" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="Platforms.platformCollisionHandler(sprite, platform)" numlines="1"></mutation></block></statement></block></xml>
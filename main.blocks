<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="]XGt(SO}3s3s$P{lSk3*" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="{%BoV/WS;bH+f}k/a1#j" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace SpriteKind" line1="{" line2="    export let Platform = SpriteKind.Player-1" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="(*}~JryhOl4hZQptIBX/" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Platforms" line1="{" line2="    class Platformer" line3="    {" line4="        isOnPlatform = false" line5="        currentPlatform: Sprite = null" line6="        sprite: Sprite = null" line7="        gravity = 0" line8="        constructor(sprite: Sprite)" line9="        {" line10="            this.sprite = sprite" line11="            this.gravity = sprite.ay" line12="        }" line13="    }" line14="" line15="    let allPlatformers: Platformer[]" line16="    export let spritesRidePlatforms: boolean" line17="    //% block=&quot;Platform&quot; color=#3B6FEA" line18="    export let platformId = SpriteKind.Player-1" line19="" line20="    /**" line21="     * Creates a platform using an image" line22="     * @param image" line23="     */" line24="    //% block=&quot;platform $img&quot; weight=1" line25="    //% img.shadow=&quot;screen_image_picker&quot;" line26="    //% group=&quot;Create&quot;" line27="    export function create(img: Image) {" line28="        if (SpriteKind.Platform == undefined) { //Platform kind is undefined when this function runs for the first time" line29="            SpriteKind.Platform = SpriteKind.Player-1" line30="        }" line31="        return sprites.create(img, SpriteKind.Platform)" line32="    }" line33="" line34="    /**" line35="     * Allows a sprite to use platforms" line36="     * @param Sprite" line37="     */" line38="    //$ block=&quot;make $sprite platformer&quot;" line39="    export function makePlatformer(sprite: Sprite)" line40="    {" line41="        if(allPlatformers == null)" line42="        {" line43="            allPlatformers = []" line44="        }" line45="        let temp = allPlatformers" line46="        while(allPlatformers.length &lt;= sprite.id)" line47="        {" line48="            allPlatformers.push(null)" line49="        }" line50="        allPlatformers[sprite.id] = new Platformer(sprite)" line51="    }" line52="" line53="    /**" line54="     * Returns true if a sprite is on top of a platform" line55="     * @param Sprite" line56="     * @returns boolean" line57="     */" line58="    //% block=&quot;Is $sprite on a platform&quot;" line59="    export function isSpriteOnPlatform(sprite: Sprite)" line60="    {" line61="        if(sprite.id &lt; allPlatformers.length) //sprite could be a platformer" line62="        {" line63="            if(allPlatformers[sprite.id] != null) //sprite is a platformer" line64="            {" line65="                return allPlatformers[sprite.id].isOnPlatform" line66="            }" line67="        }" line68="        return false" line69="    }" line70="    /**" line71="     * Handles Platform Collision (use inside of an overlap container)" line72="     * @param sprite" line73="     * @param sprite" line74="     */" line75="    //% block=&quot;make $sprite collide with $platform&quot;" line76="    export function platformCollisionHandler(sprite: Sprite, platform: Sprite) //call function inside of overlap container" line77="    {" line78="        if(platform.kind() != SpriteKind.Platform)" line79="        {" line80="            console.log(&quot;Cannot ride non-Platform sprites&quot;)" line81="            return" line82="        }" line83="        if (allPlatformers == null || sprite.id &gt;= allPlatformers.length)" line84="        {" line85="            console.log(&quot;No platformers&quot;)" line86="            return" line87="        }" line88="        let currentPlatformer = allPlatformers[sprite.id]" line89="        if(currentPlatformer == null)" line90="        {" line91="            console.log(&quot;Sprite with id: &quot; + sprite.id + &quot; is not a Platformer&quot;)" line92="            return" line93="        }" line94="        if (sprite.bottom &lt;= platform.y - (platform.y - platform.top)/4) //hits top of platform" line95="        {" line96="            currentPlatformer.isOnPlatform = true" line97="            currentPlatformer.currentPlatform = platform" line98="            sprite.ay = 0" line99="            sprite.vy = 0" line100="            sprite.bottom = platform.top" line101="        }" line102="        else if (sprite.top &gt;= platform.y) //hit bottom of tile" line103="        {" line104="            sprite.top = platform.bottom" line105="            sprite.vy = 0" line106="        }" line107="        if (sprite.right &lt; platform.x) { //hits left side of platform" line108="            //sprite.right = platform.left" line109="            while (sprite.right &lt; (platform.left + platform.x)/2 &amp;&amp; sprite.overlapsWith(platform)) {" line110="                sprite.right -= 2" line111="            }" line112="        }" line113="        else if (sprite.left &gt; platform.x) { //hits right side of platform" line114="            //sprite.left = platform.right" line115="            while(sprite.left &gt; (platform.right + platform.x)/2 &amp;&amp; sprite.overlapsWith(platform))" line116="            {" line117="                sprite.left += 1" line118="            }" line119="        }" line120="    }" line121="" line122="    game.onUpdate(function()" line123="    {" line124="        if(allPlatformers == null) //stops dereferencing null error" line125="        {" line126="            return" line127="        }" line128="        for(let p of allPlatformers)" line129="        {" line130="            if(p != null) //makes sure platformer exists" line131="            {" line132="                if(p.currentPlatform != null) //makes sure platformer is on a platform" line133="                {" line134="                    let sprite = p.sprite" line135="" line136="                    if (sprite.left &gt; p.currentPlatform.right || sprite.right &lt; p.currentPlatform.left) //drops platformer off of platform if it walks off the edge" line137="                    {" line138="                        p.isOnPlatform = false" line139="                        p.currentPlatform = null" line140="                        sprite.ay = p.gravity" line141="                        continue" line142="                    }" line143="" line144="                    if (sprite.bottom &lt; p.currentPlatform.top-2) { //sprite jumps off of platform (added wiggle room to prevent jittering)" line145="                        p.isOnPlatform = false" line146="                        p.currentPlatform = null" line147="                        sprite.ay = p.gravity" line148="                        continue" line149="                    }" line150="" line151="                    if (spritesRidePlatforms) { //makes sprites have same velocity as platform" line152="                        sprite.vx = p.currentPlatform.vx" line153="                        sprite.vy = p.currentPlatform.vy" line154="                    }" line155="                    else //stops sprite from staying on platform" line156="                    {" line157="                        sprite.vx = 0" line158="                    }" line159="                }" line160="            }" line161="        }" line162="    })" line163="}" numlines="164"></mutation></block></next></block></statement></block></xml>
<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="]BH.5d!rNO48.SwXniil" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="9{OFt%H{Nq[poq6-D!?T" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace SpriteKind" line1="{" line2="    export const Platform = SpriteKind.Player-1" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="N_5+Yb3):VLFHR[p?N$!" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Platforms" line1="{" line2="    class Platformer" line3="    {" line4="        isOnPlatform = false" line5="        currentPlatform: Sprite = null" line6="        sprite: Sprite = null" line7="        gravity = 0" line8="        constructor(sprite: Sprite)" line9="        {" line10="            this.sprite = sprite" line11="            this.gravity = sprite.ay" line12="            if(this.gravity == 0)" line13="            {" line14="                console.log(&quot;WARNING: sprite with id:&quot; + sprite.id + &quot; has a y acceleration of 0&quot;)" line15="            }" line16="        }" line17="    }" line18="" line19="    let allPlatformers: Platformer[]" line20="    let spritesRidePlatforms: boolean" line21="    " line22="    //% block=&quot;Platform&quot; color=#3B6FEA group='SpriteKind'" line23="    //% blockid=&quot;platformKind&quot;" line24="    export let platformId = SpriteKind.Platform" line25="" line26="    /**" line27="     * Creates a platform using an image" line28="     * @param image" line29="     */" line30="    //% block=&quot;platform $img&quot; group='Create' weight=100" line31="    //% img.shadow=&quot;screen_image_picker&quot;" line32="    //% blockid=&quot;createPlatform&quot;" line33="    //% blockSetVariable=myPlatform" line34="    export function create(img: Image) {" line35="        if (SpriteKind.Platform == undefined) { //Platform kind is undefined when this function runs for the first time" line36="            //SpriteKind.Platform = SpriteKind.Player-1" line37="        }" line38="        return sprites.create(img, SpriteKind.Platform)" line39="    }" line40="" line41="    /**" line42="     * Allows a sprite to use platforms" line43="     * @param Sprite" line44="     */" line45="    //% block=&quot;make %sprite=variables_get(mySprite) use platforms&quot;" line46="    //% blockid=&quot;makeSpritePlatformer&quot;" line47="    //% group='Create'" line48="    //% " line49="    export function makePlatformer(sprite: Sprite)" line50="    {" line51="        if(allPlatformers == null)" line52="        {" line53="            allPlatformers = []" line54="        }" line55="        let temp = allPlatformers" line56="        while(allPlatformers.length &lt;= sprite.id)" line57="        {" line58="            allPlatformers.push(null)" line59="        }" line60="        allPlatformers[sprite.id] = new Platformer(sprite)" line61="    }" line62="" line63="    /**" line64="     * Returns if Sprites are allowed to ride on top of platforms" line65="     * @returns boolean" line66="     */" line67="    //% block=&quot;do sprites ride platforms&quot;" line68="    //% blockid=&quot;getSpritesRidePlatforms&quot;" line69="    //% group='Behavior'" line70="    export function doSpritesRidePlatforms()" line71="    {" line72="        return spritesRidePlatforms" line73="    }" line74="" line75="    /**" line76="     * Changes sprite riding behavior" line77="     * @param boolean" line78="     */" line79="    //% block=&quot;set sprites ride platforms %b&quot;" line80="    //% blockid=&quot;setSpritesRidePlatforms&quot;" line81="    //% group='Behavior'" line82="    //% b.shadow=&quot;toggleOnOff&quot;" line83="    export function setSpritesRidePlatforms(b: boolean)" line84="    {" line85="        spritesRidePlatforms = b" line86="    }" line87="" line88="    /**" line89="     * Returns true if a sprite is on top of a platform" line90="     * @param Sprite" line91="     * @returns boolean" line92="     */" line93="    //% block=&quot;Is %sprite=variables_get(mySprite) on a platform&quot;" line94="    //% blockid=&quot;isSpriteOnPlatform&quot;" line95="    //% group='others'" line96="    export function isSpriteOnPlatform(sprite: Sprite) {" line97="        if (sprite.id &lt; allPlatformers.length) //sprite could be a platformer" line98="        {" line99="            if (allPlatformers[sprite.id] != null) //sprite is a platformer" line100="            {" line101="                return allPlatformers[sprite.id].isOnPlatform" line102="            }" line103="        }" line104="        return false" line105="    }" line106="" line107="" line108="    /**" line109="     * Handles Platform Collision (use inside of an overlap container)" line110="     * @param sprite, platform" line111="     */" line112="    //% block=&quot;make %sprite=variables_get(mySprite) collide with %platform=variables_get(myPlatform)&quot; group='others'" line113="    //% blockid=&quot;platformCollisionHandler&quot;" line114="    //% group='Collision'" line115="    export function platformCollisionHandler(sprite: Sprite, platform: Sprite) //call function inside of overlap container" line116="    {" line117="        if(platform.kind() != SpriteKind.Platform)" line118="        {" line119="            console.log(&quot;Cannot ride non-Platform sprites&quot;)" line120="            return" line121="        }" line122="        if (allPlatformers == null || sprite.id &gt;= allPlatformers.length)" line123="        {" line124="            console.log(&quot;No platformers&quot;)" line125="            return" line126="        }" line127="        let currentPlatformer = allPlatformers[sprite.id]" line128="        if(currentPlatformer == null)" line129="        {" line130="            console.log(&quot;Sprite with id: &quot; + sprite.id + &quot; is not a Platformer&quot;)" line131="            return" line132="        }" line133="        if (sprite.bottom &lt;= platform.y - (platform.y - platform.top)/4) //hits top of platform" line134="        {" line135="            currentPlatformer.isOnPlatform = true" line136="            currentPlatformer.currentPlatform = platform" line137="            sprite.ay = 0" line138="            sprite.vy = 0" line139="            sprite.bottom = platform.top" line140="        }" line141="        else if (sprite.top &gt;= platform.y) //hit bottom of tile" line142="        {" line143="            sprite.top = platform.bottom" line144="            sprite.vy = 0" line145="        }" line146="        if (sprite.right &lt; platform.x) { //hits left side of platform" line147="            //sprite.right = platform.left" line148="            while (sprite.right &lt; (platform.left + platform.x)/2 &amp;&amp; sprite.overlapsWith(platform)) {" line149="                sprite.right -= 2" line150="            }" line151="        }" line152="        else if (sprite.left &gt; platform.x) { //hits right side of platform" line153="            //sprite.left = platform.right" line154="            while(sprite.left &gt; (platform.right + platform.x)/2 &amp;&amp; sprite.overlapsWith(platform))" line155="            {" line156="                sprite.left += 1" line157="            }" line158="        }" line159="    }" line160="" line161="    game.onUpdate(function()" line162="    {" line163="        if(allPlatformers == null) //stops dereferencing null error" line164="        {" line165="            return" line166="        }" line167="        for(let p of allPlatformers)" line168="        {" line169="            if(p != null) //makes sure platformer exists" line170="            {" line171="                if(p.currentPlatform != null) //makes sure platformer is on a platform" line172="                {" line173="                    let sprite = p.sprite" line174="" line175="                    if (sprite.left &gt; p.currentPlatform.right || sprite.right &lt; p.currentPlatform.left) //drops platformer off of platform if it walks off the edge" line176="                    {" line177="                        p.isOnPlatform = false" line178="                        p.currentPlatform = null" line179="                        sprite.ay = p.gravity" line180="                        continue" line181="                    }" line182="" line183="                    if (sprite.bottom &lt; p.currentPlatform.top-2) { //sprite jumps off of platform (added wiggle room to prevent jittering)" line184="                        p.isOnPlatform = false" line185="                        p.currentPlatform = null" line186="                        sprite.ay = p.gravity" line187="                        continue" line188="                    }" line189="" line190="                    if (spritesRidePlatforms) { //makes sprites have same velocity as platform" line191="                        sprite.vx = p.currentPlatform.vx" line192="                        sprite.vy = p.currentPlatform.vy" line193="                    }" line194="                    else //stops sprite from staying on platform" line195="                    {" line196="                        sprite.vx = 0" line197="                    }" line198="                }" line199="            }" line200="        }" line201="    })" line202="}" numlines="203"></mutation></block></next></block></statement></block></xml>